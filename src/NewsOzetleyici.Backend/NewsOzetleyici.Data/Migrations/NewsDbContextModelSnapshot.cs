// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsOzetleyici.Data.Context;

#nullable disable

namespace NewsOzetleyici.Data.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    partial class NewsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3f51b5",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1275),
                            Description = "Genel haberler",
                            Name = "Genel",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1278)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#4caf50",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1893),
                            Description = "Teknoloji haberleri",
                            Name = "Teknoloji",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1893)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#ff9800",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1896),
                            Description = "Spor haberleri",
                            Name = "Spor",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1896)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#f44336",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1897),
                            Description = "Ekonomi haberleri",
                            Name = "Ekonomi",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1898)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#9c27b0",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1899),
                            Description = "Sağlık haberleri",
                            Name = "Sağlık",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1899)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#00bcd4",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1900),
                            Description = "Bilim haberleri",
                            Name = "Bilim",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1901)
                        },
                        new
                        {
                            Id = 7,
                            Color = "#795548",
                            CreatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1902),
                            Description = "Eğitim haberleri",
                            Name = "Eğitim",
                            UpdatedAt = new DateTime(2025, 6, 23, 19, 28, 19, 839, DateTimeKind.Utc).AddTicks(1903)
                        });
                });

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("News");
                });

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AiModel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("ConfidenceScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.Property<int>("SummaryLength")
                        .HasColumnType("int");

                    b.Property<string>("SummaryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.News", b =>
                {
                    b.HasOne("NewsOzetleyici.Core.Entities.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.Summary", b =>
                {
                    b.HasOne("NewsOzetleyici.Core.Entities.News", "News")
                        .WithMany("Summaries")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.Category", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("NewsOzetleyici.Core.Entities.News", b =>
                {
                    b.Navigation("Summaries");
                });
#pragma warning restore 612, 618
        }
    }
}
